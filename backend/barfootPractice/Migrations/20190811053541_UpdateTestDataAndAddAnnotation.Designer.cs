// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using barfootPractice.Models;

namespace barfootPractice.Migrations
{
    [DbContext(typeof(BarfootContext))]
    [Migration("20190811053541_UpdateTestDataAndAddAnnotation")]
    partial class UpdateTestDataAndAddAnnotation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("barfootPractice.Models.Listing", b =>
                {
                    b.Property<int>("ListingId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("ConfidentialNote");

                    b.Property<float>("Price");

                    b.Property<int>("StaffId");

                    b.Property<string>("Status")
                        .IsRequired();

                    b.HasKey("ListingId");

                    b.ToTable("Listings");

                    b.HasData(
                        new
                        {
                            ListingId = 1,
                            Address = "10 auckland street, auckland, 1010",
                            ConfidentialNote = "buyer expectation is under 1m.",
                            Price = 1200000f,
                            StaffId = 1,
                            Status = "open"
                        },
                        new
                        {
                            ListingId = 2,
                            Address = "10 auckland street, auckland, 1010",
                            ConfidentialNote = "buyer expectation is under 1m.",
                            Price = 1200000f,
                            StaffId = 2,
                            Status = "open"
                        },
                        new
                        {
                            ListingId = 3,
                            Address = "10 auckland street, auckland, 1010",
                            ConfidentialNote = "buyer expectation is under 1m.",
                            Price = 1200000f,
                            StaffId = 3,
                            Status = "open"
                        });
                });

            modelBuilder.Entity("barfootPractice.Models.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Phone")
                        .IsRequired();

                    b.HasKey("StaffId");

                    b.ToTable("Staffs");

                    b.HasData(
                        new
                        {
                            StaffId = 1,
                            Email = "test1@barfoot.co.nz",
                            Name = "test1",
                            Phone = "123456"
                        },
                        new
                        {
                            StaffId = 2,
                            Email = "test1@barfoot.co.nz",
                            Name = "test1",
                            Phone = "123456"
                        },
                        new
                        {
                            StaffId = 3,
                            Email = "test1@barfoot.co.nz",
                            Name = "test1",
                            Phone = "123456"
                        });
                });

            modelBuilder.Entity("barfootPractice.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("Role")
                        .IsRequired();

                    b.Property<int>("StaffId");

                    b.Property<string>("Token");

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Sales",
                            LastName = "User",
                            Password = "sales",
                            Role = "Sales",
                            StaffId = 1,
                            Username = "sales"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "SalesAdmin",
                            LastName = "User",
                            Password = "salesAdmin",
                            Role = "SalesAdmin",
                            StaffId = 2,
                            Username = "salesAdmin"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "SalesDepartmentAdmin",
                            LastName = "User",
                            Password = "salesDepartmentAdmin",
                            Role = "SalesDepartmentAdmin",
                            StaffId = 3,
                            Username = "salesDepartmentAdmin"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
